buildscript {
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.0"
    }
}
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0'
    id 'base'
    id 'maven-publish'
}
apply plugin: 'com.jfrog.bintray'

repositories {
    mavenCentral()
}

def GROUP_ID = 'net.aquadc.collections'
def ARTIFACT_ID = rootProject.name
def LIBRARY_VERSION_NAME = '1.0-alpha05'

group GROUP_ID
version LIBRARY_VERSION_NAME

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js {
        browser {}
        nodejs {}
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    linuxX64("linux")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        noJvmMain {
        }
        jsMain {
            dependsOn noJvmMain
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        linuxMain {
            dependsOn noJvmMain
        }
        linuxTest {}
        all {
            languageSettings.enableLanguageFeature("InlineClasses")
        }
    }
}

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
    }
}

private static Properties createPropertiesFrom(File file) {
    Properties properties = new Properties()
    properties.load(file.newDataInputStream())
    return properties
}

File file = project.rootProject.file('local.properties')
Properties properties;
String u, k;
if (file.isFile() &&
        (properties = createPropertiesFrom(file)) != null &&
        (u = properties.getProperty('bintray.user')) != null &&
        (k = properties.getProperty('bintray.apikey')) != null) {
    bintray {
        user = u
        key = k

        publish = true

        pkg {
            repo = 'maven'
            name = ARTIFACT_ID
            userOrg = 'miha-x64'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/Miha-x64/Kotlin-MPP_Collection_utils.git'
            websiteUrl = 'https://github.com/Miha-x64/Kotlin-MPP_Collection_utils/'
            issueTrackerUrl = 'https://github.com/Miha-x64/Kotlin-MPP_Collection_utils/issues'

            version {
                name = LIBRARY_VERSION_NAME
//              vcsTag = LIBRARY_VERSION_NAME
                released = new Date()
            }
        }
    }
}

bintrayUpload.doFirst {
    publications = publishing.publications
            .collect { it.name }
            .findAll { it != "kotlinMultiplatform" }
}

bintrayUpload.dependsOn publishToMavenLocal
// publishing script from https://natanfudge.github.io/fudgedocs/publish-kotlin-mpp-lib.html
